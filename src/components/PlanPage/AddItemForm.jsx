// src/components/PlanPage/AddItemForm.jsx
import React, { useState, useEffect } from 'react';
import './AddItemForm.css'; // Ensure this CSS has .form-group, .checkbox-group, etc.

const AddItemForm = ({ onAddItem, assignedPeopleForSingerRole }) => {
  const [type, setType] = useState('Song');
  const [title, setTitle] = useState('');
  const [duration, setDuration] = useState('');
  const [details, setDetails] = useState('');

  // Song-specific state
  const [artist, setArtist] = useState('');
  const [chordChartUrl, setChordChartUrl] = useState('');
  const [youtubeUrl, setYoutubeUrl] = useState('');
  const [selectedSingerIds, setSelectedSingerIds] = useState([]); // Array for singer IDs

  // Bible Verse-specific state
  const [bibleBook, setBibleBook] = useState('');
  const [bibleChapter, setBibleChapter] = useState('');
  const [bibleVerseRange, setBibleVerseRange] = useState('');

  // Reset fields when type changes
  useEffect(() => {
    setArtist(''); setChordChartUrl(''); setYoutubeUrl(''); setSelectedSingerIds([]);
    setBibleBook(''); setBibleChapter(''); setBibleVerseRange('');

    if (type === 'Divider') {
      setDuration('');
      setDetails('');
      setTitle(currentTitle => (currentTitle === '' || !['Song', 'Bible Verse', 'Generic', 'Divider'].includes(type) ? '---' : currentTitle));
    } else if (title === '---' && type !== 'Divider') {
      setTitle('');
    }
  }, [type]); // Removed title from dependency here to simplify reset based on type only

  const handleSingerSelectionChange = (singerId) => {
    setSelectedSingerIds(prevSelectedIds =>
      prevSelectedIds.includes(singerId)
        ? prevSelectedIds.filter(id => id !== singerId)
        : [...prevSelectedIds, singerId]
    );
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    let autoGeneratedTitle = title.trim();
    if (type === 'Bible Verse' && !autoGeneratedTitle && bibleBook.trim() && bibleChapter.trim() && bibleVerseRange.trim()) {
        autoGeneratedTitle = `${bibleBook.trim()} ${bibleChapter.trim()}:${bibleVerseRange.trim()}`;
    }

    if (type !== 'Divider' && type !== 'Bible Verse' && !autoGeneratedTitle) {
      alert('Please enter a title for the item.');
      return;
    }
    if (type === 'Bible Verse' && (!bibleBook.trim() || !bibleChapter.trim() || !bibleVerseRange.trim())) {
      alert('Please fill in Book, Chapter, and Verse(s) for a Bible Verse item.');
      return;
    }

    let newItemData = {
      type,
      title: type === 'Divider' ? (title.trim() || '---') : autoGeneratedTitle,
      duration: (type === 'Divider' || type === 'Bible Verse') ? null : (duration.trim() || null),
      details: (type === 'Divider' || type === 'Bible Verse') ? null : (details.trim() || null),
      artist: null, chord_chart_url: null, youtube_url: null, assigned_singer_ids: [], musical_key: null,
      bible_book: null, bible_chapter: null, bible_verse_range: null,
    };

    if (type === 'Song') {
      newItemData.artist = artist.trim() || null;
      newItemData.chord_chart_url = chordChartUrl.trim() || null;
      newItemData.youtube_url = youtubeUrl.trim() || null;
      newItemData.assigned_singer_ids = selectedSingerIds; // Assign array
    } else if (type === 'Bible Verse') {
      newItemData.bible_book = bibleBook.trim();
      newItemData.bible_chapter = bibleChapter.trim();
      newItemData.bible_verse_range = bibleVerseRange.trim();
    }

    onAddItem(newItemData);

    setTitle(type === 'Divider' ? '---' : '');
    setDuration('');
    setDetails('');
    setArtist(''); setChordChartUrl(''); setYoutubeUrl(''); setSelectedSingerIds([]);
    setBibleBook(''); setBibleChapter(''); setBibleVerseRange('');
    // setType('Generic'); // Optionally reset type to default
  };

  const showTitleInput = type !== 'Divider';
  const showDurationAndDetails = type === 'Generic' || type === 'Song' || type === 'Bible Verse';

  return (
    <form onSubmit={handleSubmit} className="add-item-form">
      <h3>Add New Service Item</h3>
      <div className="form-group">
        <label htmlFor="item-type">Type:</label>
        <select id="item-type" value={type} onChange={(e) => setType(e.target.value)}>
          <option value="Generic">Service Item</option>
          <option value="Song">Song</option>
          <option value="Bible Verse">Bible Verse</option>
          <option value="Divider">Divider</option>
        </select>
      </div>

      {showTitleInput && (
        <div className="form-group">
            <label htmlFor="item-title">
                {type === 'Song' ? 'Song Title:' : 
                (type === 'Bible Verse' ? 'Reading Title (optional - e.g., Gospel Reading):' : 'Title:')}
            </label>
            <input
              type="text"
              id="item-title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required={type === 'Generic' || type === 'Song'}
            />
        </div>
      )}
      {type === 'Divider' && (
         <div className="form-group">
            <label htmlFor="item-title">Divider Text (Optional):</label>
            <input
              type="text"
              id="item-title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="e.g., ---, Transition, Offering"
            />
        </div>
      )}

      {type === 'Song' && (
        <>
          <div className="form-group">
            <label htmlFor="song-artist">Artist:</label>
            <input type="text" id="song-artist" value={artist} onChange={(e) => setArtist(e.target.value)} placeholder="e.g., Hillsong, Chris Tomlin" />
          </div>
          <div className="form-group">
            <label htmlFor="song-chord-chart">Chord Chart URL:</label>
            <input type="url" id="song-chord-chart" value={chordChartUrl} onChange={(e) => setChordChartUrl(e.target.value)} placeholder="https://example.com/chords" />
          </div>
          <div className="form-group">
            <label htmlFor="song-youtube">YouTube URL:</label>
            <input type="url" id="song-youtube" value={youtubeUrl} onChange={(e) => setYoutubeUrl(e.target.value)} placeholder="https://www.youtube.com/watch?v=..." />
          </div>
          <div className="form-group">
            <label>Assign Singer(s) (must have "Vocals" for this event):</label>
            <div className="checkbox-group multi-select-singer-group">
              {(assignedPeopleForSingerRole && assignedPeopleForSingerRole.length > 0) ? (
                assignedPeopleForSingerRole.map(person => (
                  <label key={person.id} className="checkbox-label">
                    <input
                      type="checkbox"
                      value={person.id}
                      checked={selectedSingerIds.includes(person.id)}
                      onChange={() => handleSingerSelectionChange(person.id)}
                    />
                    {person.name}
                  </label>
                ))
              ) : (
                <p className="no-singers-message">No team members assigned "Vocals" for this plan yet, or none are pending/accepted.</p>
              )}
            </div>
          </div>
        </>
      )}

      {type === 'Bible Verse' && (
        <>
          <div className="form-group">
            <label htmlFor="bible-book">Book:</label>
            <input type="text" id="bible-book" value={bibleBook} onChange={(e) => setBibleBook(e.target.value)} placeholder="e.g., John" required />
          </div>
          <div className="form-group">
            <label htmlFor="bible-chapter">Chapter:</label>
            <input type="text" id="bible-chapter" value={bibleChapter} onChange={(e) => setBibleChapter(e.target.value)} placeholder="e.g., 3" required />
          </div>
          <div className="form-group">
            <label htmlFor="bible-verse-range">Verse(s):</label>
            <input type="text" id="bible-verse-range" value={bibleVerseRange} onChange={(e) => setBibleVerseRange(e.target.value)} placeholder="e.g., 16 or 16-18" required />
          </div>
        </>
      )}

      {showDurationAndDetails && (
        <>
          <div className="form-group">
            <label htmlFor="item-duration">Duration (optional):</label>
            <input type="text" id="item-duration" value={duration} onChange={(e) => setDuration(e.target.value)} placeholder="e.g., 5 min" />
          </div>
          <div className="form-group">
            <label htmlFor="item-details">Details (optional):</label>
            <textarea id="item-details" value={details} onChange={(e) => setDetails(e.target.value)} />
          </div>
        </>
      )}
      <div className="form-actions">
        <button type="submit" className="submit-btn">Add Item</button>
      </div>
    </form>
  );
};
export default AddItemForm;